#version 460
#extension GL_EXT_ray_tracing : enable

#include "raycommon.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

// Static
//layout(set = 1, binding = 0) uniform sampler samp;
//layout(set = 1, binding = 1) uniform texture2D textures[256];
//layout(set = 1, binding = 2) readonly buffer Vertices { Vertex v[]; } vertices;
//layout(set = 1, binding = 3) readonly buffer Indices { uint i[]; } indices;
layout(set = 1, binding = 4, rgba8) uniform image2D image;
layout(set = 1, binding = 5) writeonly buffer MousepickData { uint i[]; } mousepickData;

layout(set = 0, binding = 1) uniform CameraData_ { CameraData data; } cam;



//layout(set = 0, binding = 5) writeonly buffer uint instanceIndex;
//layout(binding = 5, set = 0, rgba8) uniform image2D image2;

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;
	
	vec4 origin = cam.data.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.data.projInverse * vec4(d.x, d.y, 1, 1) ;
		
	//vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0) ;	
	vec4 direction = cam.data.viewInverse*vec4(normalize(target.xyz / target.w), 0);

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	

	// Initial ray settings
	rayPayload.done = -1; // first ray

	rayPayload.distance = 0; // this stops the screen being black when you inserted that ray cast above

    vec3 color = vec3(0.0);

	int MAX_RECURSION = 2;// 2;
	
	float mult = 1.0f;



	


	for (int i = 0; i < MAX_RECURSION; i++) 
	{
		traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
		//color = rayPayload.color;
		//break;
		// Add the color if it is first bounce, or standard reflection bounce
		if (rayPayload.done != 2) {
			color += rayPayload.color.xyz * mult;
			mult *= 0.75;
		}
				
		const vec4 hitPos = origin + direction * rayPayload.distance;
		origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
		direction.xyz = reflect(direction.xyz, rayPayload.normal);

		// finished bounching
		if (rayPayload.done == 1) {
			break;
		} 
				
		// Mirror
		if (rayPayload.done == 2) {
			i = -1;
		}
		// Reflection time now
		else  {
			rayPayload.done = 1;
		}		
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0));
}
