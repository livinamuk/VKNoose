#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	vec4 viewPos;
} cam;

struct RayPayload {
	vec3 color;
	float distance;
	vec3 normal;
	float reflector;
};

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
		
	//vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0) ;	
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz / target.w), 0);

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

    vec3 color = vec3(0.0);

    //traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

	int MAX_RECURSION = 1;

	for (int i = 0; i < MAX_RECURSION; i++) 
	{

		traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

		vec3 hitColor = rayPayload.color;
		const vec4 hitPos = origin + direction * rayPayload.distance;

		color += hitColor;
/*
if (true) {

			if (rayPayload.distance < 0.0f) {
				color += hitColor;
				break;
			} else if (rayPayload.reflector == 1.0f && hitColor.r != 0 && hitColor.g != 0) {

				origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
				direction.xyz = reflect(direction.xyz, rayPayload.normal);
				//color += hitColor;
				color = mix(color, hitColor, 0.05);

			} else if (rayPayload.reflector == 2.0f) {
			
			    float ratio = 1.00 / 1.52;
				vec3 I = normalize(hitPos.xyz - cam.viewPos.xyz);
				vec3 R = refract(I, normalize(rayPayload.normal), ratio);

				//color = R;//vec3(1,1,0);
				traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, hitPos.xyz, tmin, direction.xyz, tmax, 0);
				color = rayPayload.color;
				//color = rayPayload.normal * 2.0 - 1.0;
						
			} else {
				//color += hitColor;
				break;
			}	
		}*/
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
